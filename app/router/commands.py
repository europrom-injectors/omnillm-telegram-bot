from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message

from core import start_message, models_info_message
from keyboard_ import create_keyboard
from database import PostgresDB

router = Router()

3


@router.message(Command("start"))
async def start(message: Message):
    return await message.reply(start_message)


@router.message(Command("clear"))
async def clear(message: Message, db: PostgresDB):
    await db.clear_messages()
    return await message.reply("üóë –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—á–∏—â–µ–Ω–∞!")


@router.message(Command("model"))
async def model(message: Message, db: PostgresDB):
    user = await db.get_user()

    model_descriptions = (
        "ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò, –ø–æ–ª—É—á–∏—Ç—å –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /model_info:\n\n"
    )

    return await message.reply(
        model_descriptions, reply_markup=create_keyboard(user.llm_model)
    )


@router.message(Command("model_info"))
async def model_info(message: Message):
    return await message.reply(models_info_message)


@router.message(Command("online"))
async def switch_online(message: Message, db: PostgresDB):
    user = await db.get_user()

    await db.update_online_model(not user.online_model)
    return await message.answer(
        "–ü–æ–∏—Å–∫ –ø–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É " + ("–æ—Ç–∫–ª—é—á–µ–Ω" if user.online_model else "–≤–∫–ª—é—á–µ–Ω")
    )
